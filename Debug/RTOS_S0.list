
RTOS_S0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000530c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055bc  080055bc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080055bc  080055bc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055bc  080055bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055c0  080055c0  000155c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080055c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000015d0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001630  20001630  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c485  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000388a  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  0003fde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001296  00000000  00000000  000415a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020756  00000000  00000000  00042836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001da43  00000000  00000000  00062f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5866  00000000  00000000  000809cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000067e8  00000000  00000000  00146238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005484 	.word	0x08005484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005484 	.word	0x08005484

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fc95 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f851 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f981 	bl	8000518 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000216:	f000 f8af 	bl	8000378 <MX_I2C1_Init>
  MX_SPI1_Init();
 800021a:	f000 f8ed 	bl	80003f8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800021e:	f000 f959 	bl	80004d4 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000222:	f000 f927 	bl	8000474 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <main+0x98>)
 8000228:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800022c:	461d      	mov	r5, r3
 800022e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800023a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800023e:	2100      	movs	r1, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f003 fdf9 	bl	8003e38 <osThreadCreate>
 8000246:	4603      	mov	r3, r0
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <main+0x9c>)
 800024a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
//  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
  osThreadDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128);
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <main+0xa0>)
 800024e:	f107 0420 	add.w	r4, r7, #32
 8000252:	461d      	mov	r5, r3
 8000254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000258:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800025c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000260:	f107 0320 	add.w	r3, r7, #32
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fde6 	bl	8003e38 <osThreadCreate>
 800026c:	4603      	mov	r3, r0
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <main+0xa4>)
 8000270:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <main+0xa8>)
 8000274:	1d3c      	adds	r4, r7, #4
 8000276:	461d      	mov	r5, r3
 8000278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f003 fdd5 	bl	8003e38 <osThreadCreate>
 800028e:	4603      	mov	r3, r0
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <main+0xac>)
 8000292:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000294:	f003 fdc9 	bl	8003e2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x94>
 800029a:	bf00      	nop
 800029c:	080054a8 	.word	0x080054a8
 80002a0:	20000748 	.word	0x20000748
 80002a4:	080054d0 	.word	0x080054d0
 80002a8:	2000074c 	.word	0x2000074c
 80002ac:	080054f8 	.word	0x080054f8
 80002b0:	20000750 	.word	0x20000750

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b09e      	sub	sp, #120	; 0x78
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 f802 	bl	80052cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d8:	463b      	mov	r3, r7
 80002da:	223c      	movs	r2, #60	; 0x3c
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 fff4 	bl	80052cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002e4:	2303      	movs	r3, #3
 80002e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f8b4 	bl	800147c <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800031a:	f000 fa05 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f002 f8dc 	bl	80024f8 <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000346:	f000 f9ef 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <SystemClock_Config+0xc0>)
 800034c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800034e:	2300      	movs	r3, #0
 8000350:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000356:	2300      	movs	r3, #0
 8000358:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4618      	mov	r0, r3
 800035e:	f002 fb33 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000368:	f000 f9de 	bl	8000728 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3778      	adds	r7, #120	; 0x78
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	00020021 	.word	0x00020021

08000378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_I2C1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	; (80003f0 <MX_I2C1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_I2C1_Init+0x74>)
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x7c>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_I2C1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <MX_I2C1_Init+0x74>)
 80003b4:	f000 fe6a 	bl	800108c <HAL_I2C_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003be:	f000 f9b3 	bl	8000728 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4809      	ldr	r0, [pc, #36]	; (80003ec <MX_I2C1_Init+0x74>)
 80003c6:	f000 fef0 	bl	80011aa <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f9aa 	bl	8000728 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d4:	2100      	movs	r1, #0
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_I2C1_Init+0x74>)
 80003d8:	f000 ff32 	bl	8001240 <HAL_I2CEx_ConfigDigitalFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f9a1 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000031c 	.word	0x2000031c
 80003f0:	40005400 	.word	0x40005400
 80003f4:	2000090e 	.word	0x2000090e

080003f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_SPI1_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_SPI1_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_SPI1_Init+0x74>)
 8000404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_SPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_SPI1_Init+0x74>)
 8000412:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000416:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_SPI1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_SPI1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_SPI1_Init+0x74>)
 8000426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_SPI1_Init+0x74>)
 800042e:	2208      	movs	r2, #8
 8000430:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_SPI1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_SPI1_Init+0x74>)
 8000446:	2207      	movs	r2, #7
 8000448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MX_SPI1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_SPI1_Init+0x74>)
 8000452:	2208      	movs	r2, #8
 8000454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000456:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_SPI1_Init+0x74>)
 8000458:	f002 fc66 	bl	8002d28 <HAL_SPI_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f961 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000370 	.word	0x20000370
 8000470:	40013000 	.word	0x40013000

08000474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <MX_USART1_UART_Init+0x5c>)
 800047c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART1_UART_Init+0x58>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART1_UART_Init+0x58>)
 80004b8:	f002 ffa2 	bl	8003400 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f931 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200003d4 	.word	0x200003d4
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <MX_USB_PCD_Init+0x40>)
 80004dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004e0:	2208      	movs	r2, #8
 80004e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_USB_PCD_Init+0x3c>)
 80004fe:	f000 feeb 	bl	80012d8 <HAL_PCD_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000508:	f000 f90e 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000045c 	.word	0x2000045c
 8000514:	40005c00 	.word	0x40005c00

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052e:	4b37      	ldr	r3, [pc, #220]	; (800060c <MX_GPIO_Init+0xf4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a36      	ldr	r2, [pc, #216]	; (800060c <MX_GPIO_Init+0xf4>)
 8000534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <MX_GPIO_Init+0xf4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <MX_GPIO_Init+0xf4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a30      	ldr	r2, [pc, #192]	; (800060c <MX_GPIO_Init+0xf4>)
 800054c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_GPIO_Init+0xf4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_GPIO_Init+0xf4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <MX_GPIO_Init+0xf4>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b28      	ldr	r3, [pc, #160]	; (800060c <MX_GPIO_Init+0xf4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b25      	ldr	r3, [pc, #148]	; (800060c <MX_GPIO_Init+0xf4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a24      	ldr	r2, [pc, #144]	; (800060c <MX_GPIO_Init+0xf4>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_GPIO_Init+0xf4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_GPIO_Init+0xf4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a1e      	ldr	r2, [pc, #120]	; (800060c <MX_GPIO_Init+0xf4>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <MX_GPIO_Init+0xf4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <MX_GPIO_Init+0xf8>)
 80005ae:	f000 fd55 	bl	800105c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005b2:	2337      	movs	r3, #55	; 0x37
 80005b4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4812      	ldr	r0, [pc, #72]	; (8000610 <MX_GPIO_Init+0xf8>)
 80005c8:	f000 fbce 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005cc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80005d0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	480a      	ldr	r0, [pc, #40]	; (8000610 <MX_GPIO_Init+0xf8>)
 80005e6:	f000 fbbf 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 fbb2 	bl	8000d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000

08000614 <taskdefault_send>:

/* USER CODE BEGIN 4 */
void taskdefault_send() {
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
	uint8_t data[] = "This is a message from Task Default\r\n";
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <taskdefault_send+0x34>)
 800061c:	463c      	mov	r4, r7
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0003 	ldmia.w	r5, {r0, r1}
 800062c:	6020      	str	r0, [r4, #0]
 800062e:	3404      	adds	r4, #4
 8000630:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, data, sizeof(data) - 1, 500);
 8000632:	4639      	mov	r1, r7
 8000634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000638:	2225      	movs	r2, #37	; 0x25
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <taskdefault_send+0x38>)
 800063c:	f002 ff2e 	bl	800349c <HAL_UART_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	08005514 	.word	0x08005514
 800064c:	200003d4 	.word	0x200003d4

08000650 <task02_send>:

void task02_send() {
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
	uint8_t data[] = "This is a message from Task 2\r\n";
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <task02_send+0x30>)
 8000658:	463c      	mov	r4, r7
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, data, sizeof(data) - 1, 500);
 8000668:	4639      	mov	r1, r7
 800066a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800066e:	221f      	movs	r2, #31
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <task02_send+0x34>)
 8000672:	f002 ff13 	bl	800349c <HAL_UART_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	bf00      	nop
 8000680:	0800553c 	.word	0x0800553c
 8000684:	200003d4 	.word	0x200003d4

08000688 <task03_send>:

void task03_send() {
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
	uint8_t data[] = "This is a message from Task 3\r\n";
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <task03_send+0x30>)
 8000690:	463c      	mov	r4, r7
 8000692:	461d      	mov	r5, r3
 8000694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000698:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800069c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, data, sizeof(data) - 1, 500);
 80006a0:	4639      	mov	r1, r7
 80006a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a6:	221f      	movs	r2, #31
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <task03_send+0x34>)
 80006aa:	f002 fef7 	bl	800349c <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	0800555c 	.word	0x0800555c
 80006bc:	200003d4 	.word	0x200003d4

080006c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  taskdefault_send();
 80006c8:	f7ff ffa4 	bl	8000614 <taskdefault_send>
	  osDelay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f003 fbfe 	bl	8003ed0 <osDelay>
	  taskdefault_send();
 80006d4:	e7f8      	b.n	80006c8 <StartDefaultTask+0x8>

080006d6 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  task02_send();
 80006de:	f7ff ffb7 	bl	8000650 <task02_send>
//	  osDelay(2000);
	  osDelay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e6:	f003 fbf3 	bl	8003ed0 <osDelay>
	  task02_send();
 80006ea:	e7f8      	b.n	80006de <StartTask02+0x8>

080006ec <StartTask03>:
  /* USER CODE END StartTask02 */
}


void StartTask03(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  task03_send();
 80006f4:	f7ff ffc8 	bl	8000688 <task03_send>
//	  osDelay(3000);
	  osDelay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fc:	f003 fbe8 	bl	8003ed0 <osDelay>
	  task03_send();
 8000700:	e7f8      	b.n	80006f4 <StartTask03+0x8>
	...

08000704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d101      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000716:	f000 fa25 	bl	8000b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012c00 	.word	0x40012c00

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_MspInit+0x4c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x4c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x4c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 facf 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_I2C_MspInit+0x7c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d127      	bne.n	80007f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007be:	23c0      	movs	r3, #192	; 0xc0
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c2:	2312      	movs	r3, #18
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ce:	2304      	movs	r3, #4
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <HAL_I2C_MspInit+0x84>)
 80007da:	f000 fac5 	bl	8000d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_I2C_MspInit+0x80>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40005400 	.word	0x40005400
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400

0800080c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_SPI_MspInit+0x7c>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d128      	bne.n	8000880 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_SPI_MspInit+0x80>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <HAL_SPI_MspInit+0x80>)
 8000834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_SPI_MspInit+0x80>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_SPI_MspInit+0x80>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <HAL_SPI_MspInit+0x80>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_SPI_MspInit+0x80>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800085e:	23e0      	movs	r3, #224	; 0xe0
 8000860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086e:	2305      	movs	r3, #5
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fa74 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40013000 	.word	0x40013000
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_UART_MspInit+0x7c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d127      	bne.n	8000902 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_UART_MspInit+0x80>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008e2:	2330      	movs	r3, #48	; 0x30
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f2:	2307      	movs	r3, #7
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008fe:	f000 fa33 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40013800 	.word	0x40013800
 8000910:	40021000 	.word	0x40021000
 8000914:	48000800 	.word	0x48000800

08000918 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_PCD_MspInit+0x80>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d129      	bne.n	800098e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_PCD_MspInit+0x84>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_PCD_MspInit+0x84>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_PCD_MspInit+0x84>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000952:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000964:	230e      	movs	r3, #14
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 f9f9 	bl	8000d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_PCD_MspInit+0x84>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_PCD_MspInit+0x84>)
 800097c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_PCD_MspInit+0x84>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40005c00 	.word	0x40005c00
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <HAL_InitTick+0xcc>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <HAL_InitTick+0xcc>)
 80009b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_InitTick+0xcc>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c8:	f107 020c 	add.w	r2, r7, #12
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 ffc6 	bl	8002964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d8:	f001 ffa2 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 80009dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_InitTick+0xd0>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_InitTick+0xd4>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HAL_InitTick+0xd8>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_InitTick+0xd4>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xd4>)
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a14:	f002 fa33 	bl	8002e7e <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <HAL_InitTick+0xd4>)
 8000a28:	f002 fa8a 	bl	8002f40 <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a3a:	2019      	movs	r0, #25
 8000a3c:	f000 f986 	bl	8000d4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f000 f962 	bl	8000d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0xdc>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	20000754 	.word	0x20000754
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	20000004 	.word	0x20000004

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ab2:	f002 faaf 	bl	8003014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000754 	.word	0x20000754

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f004 fc39 	bl	8005388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fb75 	bl	8000204 <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b28:	080055c4 	.word	0x080055c4
  ldr r2, =_sbss
 8000b2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b30:	20001630 	.word	0x20001630

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_Init+0x28>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_Init+0x28>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f8d8 	bl	8000cfe <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f7ff ff26 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b54:	f7ff fdee 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	200007a0 	.word	0x200007a0

08000b8c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200007a0 	.word	0x200007a0

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff4c 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff61 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ffb1 	bl	8000c98 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff80 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff54 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e154      	b.n	8001022 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8146 	beq.w	800101c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d005      	beq.n	8000da8 <HAL_GPIO_Init+0x40>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d130      	bne.n	8000e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	f003 0201 	and.w	r2, r3, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d017      	beq.n	8000e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d123      	bne.n	8000e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	6939      	ldr	r1, [r7, #16]
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0203 	and.w	r2, r3, #3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 80a0 	beq.w	800101c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	4b58      	ldr	r3, [pc, #352]	; (8001040 <HAL_GPIO_Init+0x2d8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a57      	ldr	r2, [pc, #348]	; (8001040 <HAL_GPIO_Init+0x2d8>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b55      	ldr	r3, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x2d8>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef4:	4a53      	ldr	r2, [pc, #332]	; (8001044 <HAL_GPIO_Init+0x2dc>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1e:	d019      	beq.n	8000f54 <HAL_GPIO_Init+0x1ec>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a49      	ldr	r2, [pc, #292]	; (8001048 <HAL_GPIO_Init+0x2e0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d013      	beq.n	8000f50 <HAL_GPIO_Init+0x1e8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a48      	ldr	r2, [pc, #288]	; (800104c <HAL_GPIO_Init+0x2e4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d00d      	beq.n	8000f4c <HAL_GPIO_Init+0x1e4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2e8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x1e0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_GPIO_Init+0x2ec>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d101      	bne.n	8000f44 <HAL_GPIO_Init+0x1dc>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e008      	b.n	8000f56 <HAL_GPIO_Init+0x1ee>
 8000f44:	2305      	movs	r3, #5
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x1ee>
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e004      	b.n	8000f56 <HAL_GPIO_Init+0x1ee>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x1ee>
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <HAL_GPIO_Init+0x1ee>
 8000f54:	2300      	movs	r3, #0
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	f002 0203 	and.w	r2, r2, #3
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f66:	4937      	ldr	r1, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2dc>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f98:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	f47f aea3 	bne.w	8000d78 <HAL_GPIO_Init+0x10>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48001000 	.word	0x48001000
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001078:	e002      	b.n	8001080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e081      	b.n	80011a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fb66 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2224      	movs	r2, #36	; 0x24
 80010bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e006      	b.n	8001114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d104      	bne.n	8001126 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001138:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001148:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69d9      	ldr	r1, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1a      	ldr	r2, [r3, #32]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b20      	cmp	r3, #32
 80011be:	d138      	bne.n	8001232 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e032      	b.n	8001234 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2224      	movs	r2, #36	; 0x24
 80011da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0201 	orr.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001232:	2302      	movs	r3, #2
  }
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b20      	cmp	r3, #32
 8001254:	d139      	bne.n	80012ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001260:	2302      	movs	r3, #2
 8001262:	e033      	b.n	80012cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2224      	movs	r2, #36	; 0x24
 8001270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001292:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2220      	movs	r2, #32
 80012ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012ca:	2302      	movs	r3, #2
  }
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b08b      	sub	sp, #44	; 0x2c
 80012dc:	af06      	add	r7, sp, #24
 80012de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e0c4      	b.n	8001474 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fb0a 	bl	8000918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fd36 	bl	8003d82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e040      	b.n	800139e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3301      	adds	r3, #1
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	3303      	adds	r3, #3
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	3338      	adds	r3, #56	; 0x38
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	333c      	adds	r3, #60	; 0x3c
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3340      	adds	r3, #64	; 0x40
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	3301      	adds	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3b9      	bcc.n	800131c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e044      	b.n	8001438 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3301      	adds	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3b5      	bcc.n	80013ae <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	687e      	ldr	r6, [r7, #4]
 800144a:	466d      	mov	r5, sp
 800144c:	f106 0410 	add.w	r4, r6, #16
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	602b      	str	r3, [r5, #0]
 8001458:	1d33      	adds	r3, r6, #4
 800145a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f002 fcab 	bl	8003db8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001482:	af00      	add	r7, sp, #0
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f001 b823 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 817d 	beq.w	80017b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b8:	4bbc      	ldr	r3, [pc, #752]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d00c      	beq.n	80014de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d15c      	bne.n	800158a <HAL_RCC_OscConfig+0x10e>
 80014d0:	4bb6      	ldr	r3, [pc, #728]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d155      	bne.n	800158a <HAL_RCC_OscConfig+0x10e>
 80014de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x94>
 800150a:	4ba8      	ldr	r3, [pc, #672]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e015      	b.n	800153c <HAL_RCC_OscConfig+0xc0>
 8001510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001514:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001528:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800152c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001538:	4b9c      	ldr	r3, [pc, #624]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001540:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001544:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001548:	fa92 f2a2 	rbit	r2, r2
 800154c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001550:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001554:	fab2 f282 	clz	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	f002 021f 	and.w	r2, r2, #31
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 811f 	beq.w	80017b0 <HAL_RCC_OscConfig+0x334>
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 8116 	bne.w	80017b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f000 bfaf 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x12e>
 800159c:	4b83      	ldr	r3, [pc, #524]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a82      	ldr	r2, [pc, #520]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e036      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x158>
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a78      	ldr	r2, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e021      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x184>
 80015e6:	4b71      	ldr	r3, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a70      	ldr	r2, [pc, #448]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6d      	ldr	r2, [pc, #436]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b67      	ldr	r3, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a66      	ldr	r2, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f023 020f 	bic.w	r2, r3, #15
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	495f      	ldr	r1, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800162e:	4313      	orrs	r3, r2
 8001630:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d059      	beq.n	80016f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff faa3 	bl	8000b8c <HAL_GetTick>
 8001646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fa9e 	bl	8000b8c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bf43 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001676:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x218>
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0x244>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016cc:	fa92 f2a2 	rbit	r2, r2
 80016d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ab      	beq.n	800164c <HAL_RCC_OscConfig+0x1d0>
 80016f4:	e05d      	b.n	80017b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa49 	bl	8000b8c <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fa44 	bl	8000b8c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d902      	bls.n	8001716 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	f000 bee9 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800172a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0x2cc>
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e015      	b.n	8001774 <HAL_RCC_OscConfig+0x2f8>
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800175c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001760:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001764:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001778:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800177c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001780:	fa92 f2a2 	rbit	r2, r2
 8001784:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001788:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ab      	bne.n	8001700 <HAL_RCC_OscConfig+0x284>
 80017a8:	e003      	b.n	80017b2 <HAL_RCC_OscConfig+0x336>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 817d 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017c8:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017d4:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d172      	bne.n	80018c6 <HAL_RCC_OscConfig+0x44a>
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d16c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x44a>
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x3a0>
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x3c8>
 800181c:	2302      	movs	r3, #2
 800181e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001834:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2202      	movs	r2, #2
 8001846:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800184a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800184e:	fa92 f2a2 	rbit	r2, r2
 8001852:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001856:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800185a:	fab2 f282 	clz	r2, r2
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f042 0220 	orr.w	r2, r2, #32
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f002 021f 	and.w	r2, r2, #31
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <HAL_RCC_OscConfig+0x410>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d002      	beq.n	800188c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f000 be2e 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	21f8      	movs	r1, #248	; 0xf8
 80018a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018aa:	fa91 f1a1 	rbit	r1, r1
 80018ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018b6:	fab1 f181 	clz	r1, r1
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	408b      	lsls	r3, r1
 80018be:	4969      	ldr	r1, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	e0fd      	b.n	8001ac2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8088 	beq.w	80019e8 <HAL_RCC_OscConfig+0x56c>
 80018d8:	2301      	movs	r3, #1
 80018da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	461a      	mov	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f942 	bl	8000b8c <HAL_GetTick>
 8001908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff f93d 	bl	8000b8c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 bde2 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001936:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x4d8>
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e013      	b.n	800197c <HAL_RCC_OscConfig+0x500>
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800196c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2202      	movs	r2, #2
 800197e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001982:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800198e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f002 021f 	and.w	r2, r2, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0af      	beq.n	800190e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	21f8      	movs	r1, #248	; 0xf8
 80019c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019cc:	fa91 f1a1 	rbit	r1, r1
 80019d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019d8:	fab1 f181 	clz	r1, r1
 80019dc:	b2c9      	uxtb	r1, r1
 80019de:	408b      	lsls	r3, r1
 80019e0:	4920      	ldr	r1, [pc, #128]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
 80019e6:	e06c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x646>
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f8ba 	bl	8000b8c <HAL_GetTick>
 8001a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f8b5 	bl	8000b8c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d902      	bls.n	8001a34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f000 bd5a 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d104      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5ec>
 8001a5e:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0x614>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a8c:	4bc8      	ldr	r3, [pc, #800]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2202      	movs	r2, #2
 8001a92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a9a:	fa92 f2a2 	rbit	r2, r2
 8001a9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001aa2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f042 0220 	orr.w	r2, r2, #32
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f002 021f 	and.w	r2, r2, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ad      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8110 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d079      	beq.n	8001bdc <HAL_RCC_OscConfig+0x760>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4bab      	ldr	r3, [pc, #684]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f83b 	bl	8000b8c <HAL_GetTick>
 8001b16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff f836 	bl	8000b8c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f000 bcdb 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b70:	2202      	movs	r2, #2
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8c:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b98:	2102      	movs	r1, #2
 8001b9a:	6019      	str	r1, [r3, #0]
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f1a3 	rbit	r1, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bb2:	6019      	str	r1, [r3, #0]
  return result;
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0a0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x6a0>
 8001bda:	e08d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x87c>
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ffb5 	bl	8000b8c <HAL_GetTick>
 8001c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7fe ffb0 	bl	8000b8c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d902      	bls.n	8001c3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f000 bc55 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ca8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	6019      	str	r1, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f1a3 	rbit	r1, r3
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cd0:	6019      	str	r1, [r3, #0]
  return result;
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d197      	bne.n	8001c28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 81a1 	beq.w	8002050 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d116      	bne.n	8001d4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	61d3      	str	r3, [r2, #28]
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7fe ff11 	bl	8000b8c <HAL_GetTick>
 8001d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7fe ff0c 	bl	8000b8c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e3b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ef      	beq.n	8001d70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_OscConfig+0x940>
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e03c      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	10908120 	.word	0x10908120
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x96a>
 8001dcc:	4bc1      	ldr	r3, [pc, #772]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4ac0      	ldr	r2, [pc, #768]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4bbe      	ldr	r3, [pc, #760]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4abd      	ldr	r2, [pc, #756]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e020      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x994>
 8001df6:	4bb7      	ldr	r3, [pc, #732]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4ab6      	ldr	r2, [pc, #728]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4bb4      	ldr	r3, [pc, #720]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4ab3      	ldr	r2, [pc, #716]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001e10:	4bb0      	ldr	r3, [pc, #704]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4aaf      	ldr	r2, [pc, #700]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4bad      	ldr	r3, [pc, #692]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4aac      	ldr	r2, [pc, #688]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e22:	f023 0304 	bic.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8081 	beq.w	8001f3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fea7 	bl	8000b8c <HAL_GetTick>
 8001e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe fea2 	bl	8000b8c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e345      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ea2:	601a      	str	r2, [r3, #0]
  return result;
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xa4c>
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0xa74>
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ef8:	2102      	movs	r1, #2
 8001efa:	6011      	str	r1, [r2, #0]
 8001efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	fa92 f1a2 	rbit	r1, r2
 8001f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f12:	6011      	str	r1, [r2, #0]
  return result;
 8001f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d084      	beq.n	8001e44 <HAL_RCC_OscConfig+0x9c8>
 8001f3a:	e07f      	b.n	800203c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7fe fe26 	bl	8000b8c <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fe21 	bl	8000b8c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e2c4      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f66:	2202      	movs	r2, #2
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fa4:	601a      	str	r2, [r3, #0]
  return result;
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0xb4e>
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0xb76>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002002:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fa92 f1a2 	rbit	r1, r2
 800200c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002010:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002014:	6011      	str	r1, [r2, #0]
  return result;
 8002016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f002 021f 	and.w	r2, r2, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d184      	bne.n	8001f46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8242 	beq.w	80024e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	f000 8213 	beq.w	8002496 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	f040 8162 	bne.w	8002346 <HAL_RCC_OscConfig+0xeca>
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800208a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020a6:	601a      	str	r2, [r3, #0]
  return result;
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	461a      	mov	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd60 	bl	8000b8c <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	e00c      	b.n	80020ec <HAL_RCC_OscConfig+0xc70>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fd58 	bl	8000b8c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1fd      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800211a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0xcba>
 8002130:	4bb0      	ldr	r3, [pc, #704]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e027      	b.n	8002186 <HAL_RCC_OscConfig+0xd0a>
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800213e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b9c      	ldr	r3, [pc, #624]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800218e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002192:	6011      	str	r1, [r2, #0]
 8002194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002198:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	fa92 f1a2 	rbit	r1, r2
 80021a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021aa:	6011      	str	r1, [r2, #0]
  return result;
 80021ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d182      	bne.n	80020d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	497f      	ldr	r1, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002228:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	461a      	mov	r2, r3
 800223c:	2301      	movs	r3, #1
 800223e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fca4 	bl	8000b8c <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	e009      	b.n	800225e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe fc9f 	bl	8000b8c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e144      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002282:	601a      	str	r2, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800228c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe2c>
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e027      	b.n	80022f8 <HAL_RCC_OscConfig+0xe7c>
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fa92 f1a2 	rbit	r1, r2
 8002314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002318:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800231c:	6011      	str	r1, [r2, #0]
  return result;
 800231e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002322:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f042 0220 	orr.w	r2, r2, #32
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f002 021f 	and.w	r2, r2, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d082      	beq.n	800224a <HAL_RCC_OscConfig+0xdce>
 8002344:	e0cf      	b.n	80024e6 <HAL_RCC_OscConfig+0x106a>
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800234e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002374:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fbfe 	bl	8000b8c <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e009      	b.n	80023aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fbf9 	bl	8000b8c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e09e      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d104      	bne.n	80023f8 <HAL_RCC_OscConfig+0xf7c>
 80023ee:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e029      	b.n	8002448 <HAL_RCC_OscConfig+0xfcc>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_OscConfig+0x1078>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002468:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800246c:	6011      	str	r1, [r2, #0]
  return result;
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d180      	bne.n	8002396 <HAL_RCC_OscConfig+0xf1a>
 8002494:	e027      	b.n	80024e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01e      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x1078>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	; 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e162      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	498b      	ldr	r1, [pc, #556]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e14a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	497f      	ldr	r1, [pc, #508]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80dc 	beq.w	8002724 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d13c      	bne.n	80025ee <HAL_RCC_ClockConfig+0xf6>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_RCC_ClockConfig+0xa6>
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e00f      	b.n	80025be <HAL_RCC_ClockConfig+0xc6>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	667b      	str	r3, [r7, #100]	; 0x64
 80025ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b0:	663b      	str	r3, [r7, #96]	; 0x60
 80025b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ce:	fab2 f282 	clz	r2, r2
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f002 021f 	and.w	r2, r2, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d17b      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0f3      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d13c      	bne.n	8002670 <HAL_RCC_ClockConfig+0x178>
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_ClockConfig+0x128>
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e00f      	b.n	8002640 <HAL_RCC_ClockConfig+0x148>
 8002620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	647b      	str	r3, [r7, #68]	; 0x44
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002644:	63ba      	str	r2, [r7, #56]	; 0x38
 8002646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f042 0220 	orr.w	r2, r2, #32
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f002 021f 	and.w	r2, r2, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13a      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b2      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002670:	2302      	movs	r3, #2
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_RCC_ClockConfig+0x1a0>
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e00d      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1bc>
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	2302      	movs	r3, #2
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	61ba      	str	r2, [r7, #24]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	617a      	str	r2, [r7, #20]
  return result;
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e079      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	491a      	ldr	r1, [pc, #104]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fa4a 	bl	8000b8c <HAL_GetTick>
 80026f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fa46 	bl	8000b8c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e061      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d214      	bcs.n	800275c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4906      	ldr	r1, [pc, #24]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e040      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4912      	ldr	r1, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800279a:	f000 f829 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800279e:	4601      	mov	r1, r0
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	22f0      	movs	r2, #240	; 0xf0
 80027aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	60fa      	str	r2, [r7, #12]
  return result;
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	40d3      	lsrs	r3, r2
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x2ec>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	fa21 f303 	lsr.w	r3, r1, r3
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x2f0>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCC_ClockConfig+0x2f4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f8e6 	bl	80009a0 <HAL_InitTick>
  
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3778      	adds	r7, #120	; 0x78
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08005584 	.word	0x08005584
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e03c      	b.n	800289a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e03c      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800282c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002830:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	607a      	str	r2, [r7, #4]
  return result;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	220f      	movs	r2, #15
 8002854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	60fa      	str	r2, [r7, #12]
  return result;
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002878:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	e004      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	623b      	str	r3, [r7, #32]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800289c:	623b      	str	r3, [r7, #32]
      break;
 800289e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	372c      	adds	r7, #44	; 0x2c
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	007a1200 	.word	0x007a1200
 80028b8:	0800559c 	.word	0x0800559c
 80028bc:	080055ac 	.word	0x080055ac
 80028c0:	003d0900 	.word	0x003d0900

080028c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028e2:	f7ff ffef 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	603a      	str	r2, [r7, #0]
  return result;
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	fab2 f282 	clz	r2, r2
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	40d3      	lsrs	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_RCC_GetPCLK1Freq+0x40>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	08005594 	.word	0x08005594

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002926:	f7ff ffcd 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 800292a:	4601      	mov	r1, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002934:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002938:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	603a      	str	r2, [r7, #0]
  return result;
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	fab2 f282 	clz	r2, r2
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	40d3      	lsrs	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x40>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	08005594 	.word	0x08005594

08002964 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	220f      	movs	r2, #15
 8002972:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_RCC_GetClockConfig+0x5c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCC_GetClockConfig+0x60>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0207 	and.w	r2, r3, #7
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40022000 	.word	0x40022000

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b092      	sub	sp, #72	; 0x48
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80d4 	beq.w	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ec:	4b4e      	ldr	r3, [pc, #312]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10e      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a4a      	ldr	r2, [pc, #296]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	61d3      	str	r3, [r2, #28]
 8002a04:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe f8ad 	bl	8000b8c <HAL_GetTick>
 8002a32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e008      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe f8a9 	bl	8000b8c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b64      	cmp	r3, #100	; 0x64
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e169      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b38      	ldr	r3, [pc, #224]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8084 	beq.w	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d07c      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a74:	4b2c      	ldr	r3, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe f859 	bl	8000b8c <HAL_GetTick>
 8002ada:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe f855 	bl	8000b8c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e113      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002af4:	2302      	movs	r3, #2
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	2302      	movs	r3, #2
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d108      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b22:	4b01      	ldr	r3, [pc, #4]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	e00d      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	10908100 	.word	0x10908100
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	4b78      	ldr	r3, [pc, #480]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2202      	movs	r2, #2
 8002b46:	613a      	str	r2, [r7, #16]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	fa92 f2a2 	rbit	r2, r2
 8002b4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0b7      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	496a      	ldr	r1, [pc, #424]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba0:	4b60      	ldr	r3, [pc, #384]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f023 0203 	bic.w	r2, r3, #3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	495d      	ldr	r1, [pc, #372]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bbe:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4956      	ldr	r1, [pc, #344]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	494e      	ldr	r1, [pc, #312]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f023 0210 	bic.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4947      	ldr	r1, [pc, #284]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c18:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	493f      	ldr	r1, [pc, #252]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f023 0220 	bic.w	r2, r3, #32
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4938      	ldr	r1, [pc, #224]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4930      	ldr	r1, [pc, #192]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4929      	ldr	r1, [pc, #164]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	4921      	ldr	r1, [pc, #132]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	491a      	ldr	r1, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	4912      	ldr	r1, [pc, #72]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	490b      	ldr	r1, [pc, #44]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3748      	adds	r7, #72	; 0x48
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e09d      	b.n	8002e76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4a:	d009      	beq.n	8002d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	e005      	b.n	8002d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fd46 	bl	800080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002da0:	d902      	bls.n	8002da8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e002      	b.n	8002dae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002db6:	d007      	beq.n	8002dc8 <HAL_SPI_Init+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dc0:	d002      	beq.n	8002dc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	ea42 0103 	orr.w	r1, r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	f003 0204 	and.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e049      	b.n	8002f24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f841 	bl	8002f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 f9f1 	bl	80032a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d001      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e04a      	b.n	8002fee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <HAL_TIM_Base_Start_IT+0xbc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d013      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d115      	bne.n	8002fd8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d015      	beq.n	8002fea <HAL_TIM_Base_Start_IT+0xaa>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d011      	beq.n	8002fea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	e008      	b.n	8002fea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	40013400 	.word	0x40013400
 800300c:	40014000 	.word	0x40014000
 8003010:	00010007 	.word	0x00010007

08003014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0202 	mvn.w	r2, #2
 8003040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f905 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8f7 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f908 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0204 	mvn.w	r2, #4
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8db 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8cd 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8de 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0208 	mvn.w	r2, #8
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2204      	movs	r2, #4
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8b1 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8a3 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f8b4 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b10      	cmp	r3, #16
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0210 	mvn.w	r2, #16
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2208      	movs	r2, #8
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f887 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f879 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f88a 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0201 	mvn.w	r2, #1
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fab6 	bl	8000704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f90a 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d2:	d10e      	bne.n	80031f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b80      	cmp	r3, #128	; 0x80
 80031e0:	d107      	bne.n	80031f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8fd 	bl	80033ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d10e      	bne.n	800321e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d107      	bne.n	800321e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f838 	bl	800328e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b20      	cmp	r3, #32
 800322a:	d10e      	bne.n	800324a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d107      	bne.n	800324a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f06f 0220 	mvn.w	r2, #32
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8bd 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3c      	ldr	r2, [pc, #240]	; (80033a8 <TIM_Base_SetConfig+0x104>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00f      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a39      	ldr	r2, [pc, #228]	; (80033ac <TIM_Base_SetConfig+0x108>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a38      	ldr	r2, [pc, #224]	; (80033b0 <TIM_Base_SetConfig+0x10c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a37      	ldr	r2, [pc, #220]	; (80033b4 <TIM_Base_SetConfig+0x110>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2d      	ldr	r2, [pc, #180]	; (80033a8 <TIM_Base_SetConfig+0x104>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <TIM_Base_SetConfig+0x108>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <TIM_Base_SetConfig+0x10c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a28      	ldr	r2, [pc, #160]	; (80033b4 <TIM_Base_SetConfig+0x110>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a27      	ldr	r2, [pc, #156]	; (80033b8 <TIM_Base_SetConfig+0x114>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a26      	ldr	r2, [pc, #152]	; (80033bc <TIM_Base_SetConfig+0x118>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <TIM_Base_SetConfig+0x11c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <TIM_Base_SetConfig+0x104>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <TIM_Base_SetConfig+0x110>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <TIM_Base_SetConfig+0x114>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <TIM_Base_SetConfig+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <TIM_Base_SetConfig+0x11c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e040      	b.n	8003494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd fa34 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8b6 	bl	80035b0 <UART_SetConfig>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa7e 	bl	8003958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800346a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800347a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb05 	bl	8003a9c <UART_CheckIdleState>
 8003492:	4603      	mov	r3, r0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d178      	bne.n	80035a6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Transmit+0x24>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e071      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2221      	movs	r2, #33	; 0x21
 80034d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d2:	f7fd fb5b 	bl	8000b8c <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	88fa      	ldrh	r2, [r7, #6]
 80034dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x68>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800350c:	e030      	b.n	8003570 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb67 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d004      	beq.n	800352e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e03c      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	881a      	ldrh	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003540:	b292      	uxth	r2, r2
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	3302      	adds	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e008      	b.n	800355e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b292      	uxth	r2, r2
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	3301      	adds	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1c8      	bne.n	800350e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb30 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d004      	beq.n	800359c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e005      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035de:	f023 030c 	bic.w	r3, r3, #12
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6979      	ldr	r1, [r7, #20]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4aa7      	ldr	r2, [pc, #668]	; (80038c8 <UART_SetConfig+0x318>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d120      	bne.n	8003672 <UART_SetConfig+0xc2>
 8003630:	4ba6      	ldr	r3, [pc, #664]	; (80038cc <UART_SetConfig+0x31c>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d817      	bhi.n	800366c <UART_SetConfig+0xbc>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x94>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003655 	.word	0x08003655
 8003648:	08003661 	.word	0x08003661
 800364c:	08003667 	.word	0x08003667
 8003650:	0800365b 	.word	0x0800365b
 8003654:	2301      	movs	r3, #1
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e0b5      	b.n	80037c6 <UART_SetConfig+0x216>
 800365a:	2302      	movs	r3, #2
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e0b2      	b.n	80037c6 <UART_SetConfig+0x216>
 8003660:	2304      	movs	r3, #4
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e0af      	b.n	80037c6 <UART_SetConfig+0x216>
 8003666:	2308      	movs	r3, #8
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e0ac      	b.n	80037c6 <UART_SetConfig+0x216>
 800366c:	2310      	movs	r3, #16
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e0a9      	b.n	80037c6 <UART_SetConfig+0x216>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a96      	ldr	r2, [pc, #600]	; (80038d0 <UART_SetConfig+0x320>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d124      	bne.n	80036c6 <UART_SetConfig+0x116>
 800367c:	4b93      	ldr	r3, [pc, #588]	; (80038cc <UART_SetConfig+0x31c>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003688:	d011      	beq.n	80036ae <UART_SetConfig+0xfe>
 800368a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800368e:	d817      	bhi.n	80036c0 <UART_SetConfig+0x110>
 8003690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003694:	d011      	beq.n	80036ba <UART_SetConfig+0x10a>
 8003696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369a:	d811      	bhi.n	80036c0 <UART_SetConfig+0x110>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <UART_SetConfig+0xf8>
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a4:	d006      	beq.n	80036b4 <UART_SetConfig+0x104>
 80036a6:	e00b      	b.n	80036c0 <UART_SetConfig+0x110>
 80036a8:	2300      	movs	r3, #0
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e08b      	b.n	80037c6 <UART_SetConfig+0x216>
 80036ae:	2302      	movs	r3, #2
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e088      	b.n	80037c6 <UART_SetConfig+0x216>
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e085      	b.n	80037c6 <UART_SetConfig+0x216>
 80036ba:	2308      	movs	r3, #8
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e082      	b.n	80037c6 <UART_SetConfig+0x216>
 80036c0:	2310      	movs	r3, #16
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e07f      	b.n	80037c6 <UART_SetConfig+0x216>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a82      	ldr	r2, [pc, #520]	; (80038d4 <UART_SetConfig+0x324>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d124      	bne.n	800371a <UART_SetConfig+0x16a>
 80036d0:	4b7e      	ldr	r3, [pc, #504]	; (80038cc <UART_SetConfig+0x31c>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80036d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036dc:	d011      	beq.n	8003702 <UART_SetConfig+0x152>
 80036de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036e2:	d817      	bhi.n	8003714 <UART_SetConfig+0x164>
 80036e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036e8:	d011      	beq.n	800370e <UART_SetConfig+0x15e>
 80036ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ee:	d811      	bhi.n	8003714 <UART_SetConfig+0x164>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <UART_SetConfig+0x14c>
 80036f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f8:	d006      	beq.n	8003708 <UART_SetConfig+0x158>
 80036fa:	e00b      	b.n	8003714 <UART_SetConfig+0x164>
 80036fc:	2300      	movs	r3, #0
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e061      	b.n	80037c6 <UART_SetConfig+0x216>
 8003702:	2302      	movs	r3, #2
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e05e      	b.n	80037c6 <UART_SetConfig+0x216>
 8003708:	2304      	movs	r3, #4
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e05b      	b.n	80037c6 <UART_SetConfig+0x216>
 800370e:	2308      	movs	r3, #8
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e058      	b.n	80037c6 <UART_SetConfig+0x216>
 8003714:	2310      	movs	r3, #16
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e055      	b.n	80037c6 <UART_SetConfig+0x216>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6e      	ldr	r2, [pc, #440]	; (80038d8 <UART_SetConfig+0x328>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d124      	bne.n	800376e <UART_SetConfig+0x1be>
 8003724:	4b69      	ldr	r3, [pc, #420]	; (80038cc <UART_SetConfig+0x31c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800372c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003730:	d011      	beq.n	8003756 <UART_SetConfig+0x1a6>
 8003732:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003736:	d817      	bhi.n	8003768 <UART_SetConfig+0x1b8>
 8003738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800373c:	d011      	beq.n	8003762 <UART_SetConfig+0x1b2>
 800373e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003742:	d811      	bhi.n	8003768 <UART_SetConfig+0x1b8>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <UART_SetConfig+0x1a0>
 8003748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800374c:	d006      	beq.n	800375c <UART_SetConfig+0x1ac>
 800374e:	e00b      	b.n	8003768 <UART_SetConfig+0x1b8>
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e037      	b.n	80037c6 <UART_SetConfig+0x216>
 8003756:	2302      	movs	r3, #2
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e034      	b.n	80037c6 <UART_SetConfig+0x216>
 800375c:	2304      	movs	r3, #4
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e031      	b.n	80037c6 <UART_SetConfig+0x216>
 8003762:	2308      	movs	r3, #8
 8003764:	77fb      	strb	r3, [r7, #31]
 8003766:	e02e      	b.n	80037c6 <UART_SetConfig+0x216>
 8003768:	2310      	movs	r3, #16
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e02b      	b.n	80037c6 <UART_SetConfig+0x216>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5a      	ldr	r2, [pc, #360]	; (80038dc <UART_SetConfig+0x32c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d124      	bne.n	80037c2 <UART_SetConfig+0x212>
 8003778:	4b54      	ldr	r3, [pc, #336]	; (80038cc <UART_SetConfig+0x31c>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003780:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003784:	d011      	beq.n	80037aa <UART_SetConfig+0x1fa>
 8003786:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800378a:	d817      	bhi.n	80037bc <UART_SetConfig+0x20c>
 800378c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003790:	d011      	beq.n	80037b6 <UART_SetConfig+0x206>
 8003792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003796:	d811      	bhi.n	80037bc <UART_SetConfig+0x20c>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x1f4>
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d006      	beq.n	80037b0 <UART_SetConfig+0x200>
 80037a2:	e00b      	b.n	80037bc <UART_SetConfig+0x20c>
 80037a4:	2300      	movs	r3, #0
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x216>
 80037aa:	2302      	movs	r3, #2
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e00a      	b.n	80037c6 <UART_SetConfig+0x216>
 80037b0:	2304      	movs	r3, #4
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e007      	b.n	80037c6 <UART_SetConfig+0x216>
 80037b6:	2308      	movs	r3, #8
 80037b8:	77fb      	strb	r3, [r7, #31]
 80037ba:	e004      	b.n	80037c6 <UART_SetConfig+0x216>
 80037bc:	2310      	movs	r3, #16
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e001      	b.n	80037c6 <UART_SetConfig+0x216>
 80037c2:	2310      	movs	r3, #16
 80037c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ce:	d15b      	bne.n	8003888 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80037d0:	7ffb      	ldrb	r3, [r7, #31]
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d827      	bhi.n	8003826 <UART_SetConfig+0x276>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x22c>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003827 	.word	0x08003827
 80037f8:	08003827 	.word	0x08003827
 80037fc:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7ff f86c 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7ff f88a 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 800380c:	61b8      	str	r0, [r7, #24]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <UART_SetConfig+0x330>)
 8003812:	61bb      	str	r3, [r7, #24]
        break;
 8003814:	e00c      	b.n	8003830 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe ffeb 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800381a:	61b8      	str	r0, [r7, #24]
        break;
 800381c:	e008      	b.n	8003830 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77bb      	strb	r3, [r7, #30]
        break;
 800382e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8082 	beq.w	800393c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	005a      	lsls	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b0f      	cmp	r3, #15
 8003852:	d916      	bls.n	8003882 <UART_SetConfig+0x2d2>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d212      	bcs.n	8003882 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	b29b      	uxth	r3, r3
 8003860:	f023 030f 	bic.w	r3, r3, #15
 8003864:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	b29a      	uxth	r2, r3
 8003872:	89fb      	ldrh	r3, [r7, #14]
 8003874:	4313      	orrs	r3, r2
 8003876:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	89fa      	ldrh	r2, [r7, #14]
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	e05c      	b.n	800393c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	77bb      	strb	r3, [r7, #30]
 8003886:	e059      	b.n	800393c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d835      	bhi.n	80038fa <UART_SetConfig+0x34a>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x2e4>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038e5 	.word	0x080038e5
 80038a0:	080038fb 	.word	0x080038fb
 80038a4:	080038eb 	.word	0x080038eb
 80038a8:	080038fb 	.word	0x080038fb
 80038ac:	080038fb 	.word	0x080038fb
 80038b0:	080038fb 	.word	0x080038fb
 80038b4:	080038f3 	.word	0x080038f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7ff f810 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e021      	b.n	8003904 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7ff f82e 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e01d      	b.n	8003904 <UART_SetConfig+0x354>
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40004400 	.word	0x40004400
 80038d4:	40004800 	.word	0x40004800
 80038d8:	40004c00 	.word	0x40004c00
 80038dc:	40005000 	.word	0x40005000
 80038e0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <UART_SetConfig+0x3a4>)
 80038e6:	61bb      	str	r3, [r7, #24]
        break;
 80038e8:	e00c      	b.n	8003904 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ea:	f7fe ff81 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80038ee:	61b8      	str	r0, [r7, #24]
        break;
 80038f0:	e008      	b.n	8003904 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e004      	b.n	8003904 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
        break;
 8003902:	bf00      	nop
    }

    if (pclk != 0U)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	085a      	lsrs	r2, r3, #1
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	441a      	add	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b0f      	cmp	r3, #15
 8003922:	d909      	bls.n	8003938 <UART_SetConfig+0x388>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392a:	d205      	bcs.n	8003938 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	e001      	b.n	800393c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003948:	7fbb      	ldrb	r3, [r7, #30]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	007a1200 	.word	0x007a1200

08003958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a56:	d10a      	bne.n	8003a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b098      	sub	sp, #96	; 0x60
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aac:	f7fd f86e 	bl	8000b8c <HAL_GetTick>
 8003ab0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d12e      	bne.n	8003b1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f88c 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d021      	beq.n	8003b1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aee:	653b      	str	r3, [r7, #80]	; 0x50
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
 8003afa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e6      	bne.n	8003ada <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e062      	b.n	8003be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d149      	bne.n	8003bc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f856 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03c      	beq.n	8003bc0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	623b      	str	r3, [r7, #32]
   return(result);
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
 8003b66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b98:	61fa      	str	r2, [r7, #28]
 8003b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e011      	b.n	8003be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3758      	adds	r7, #88	; 0x58
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfc:	e049      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d045      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fc ffc1 	bl	8000b8c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e048      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d031      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d110      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f838 	bl	8003cba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e029      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	d111      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f81e 	bl	8003cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e00f      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d0a6      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b095      	sub	sp, #84	; 0x54
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e6      	bne.n	8003cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3308      	adds	r3, #8
 8003d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d118      	bne.n	8003d62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	647b      	str	r3, [r7, #68]	; 0x44
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6979      	ldr	r1, [r7, #20]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e6      	bne.n	8003d30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d76:	bf00      	nop
 8003d78:	3754      	adds	r7, #84	; 0x54
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d8a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003db8:	b084      	sub	sp, #16
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	f107 0014 	add.w	r0, r7, #20
 8003dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	b004      	add	sp, #16
 8003df8:	4770      	bx	lr

08003dfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e0c:	2b84      	cmp	r3, #132	; 0x84
 8003e0e:	d005      	beq.n	8003e1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	3303      	adds	r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e2e:	f000 faed 	bl	800440c <vTaskStartScheduler>
  
  return osOK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af04      	add	r7, sp, #16
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d020      	beq.n	8003e8c <osThreadCreate+0x54>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01c      	beq.n	8003e8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685c      	ldr	r4, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691e      	ldr	r6, [r3, #16]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ffc8 	bl	8003dfa <makeFreeRtosPriority>
 8003e6a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e74:	9202      	str	r2, [sp, #8]
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	9100      	str	r1, [sp, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	4629      	mov	r1, r5
 8003e80:	4620      	mov	r0, r4
 8003e82:	f000 f8ed 	bl	8004060 <xTaskCreateStatic>
 8003e86:	4603      	mov	r3, r0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e01c      	b.n	8003ec6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685c      	ldr	r4, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e98:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ffaa 	bl	8003dfa <makeFreeRtosPriority>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	9200      	str	r2, [sp, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f000 f92e 	bl	8004118 <xTaskCreate>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ed0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <osDelay+0x16>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	e000      	b.n	8003ee8 <osDelay+0x18>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fa5b 	bl	80043a4 <vTaskDelay>
  
  return osOK;
 8003eee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0208 	add.w	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f103 0208 	add.w	r2, r3, #8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f103 0208 	add.w	r2, r3, #8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d103      	bne.n	8003fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e00c      	b.n	8003fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e002      	b.n	8003fc8 <vListInsert+0x2e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d2f6      	bcs.n	8003fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6892      	ldr	r2, [r2, #8]
 8004022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6852      	ldr	r2, [r2, #4]
 800402c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d103      	bne.n	8004040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af04      	add	r7, sp, #16
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800406e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	61fb      	str	r3, [r7, #28]
}
 80040a2:	bf00      	nop
 80040a4:	e7fe      	b.n	80040a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040a6:	23a0      	movs	r3, #160	; 0xa0
 80040a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2ba0      	cmp	r3, #160	; 0xa0
 80040ae:	d00a      	beq.n	80040c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61bb      	str	r3, [r7, #24]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01e      	beq.n	800410a <xTaskCreateStatic+0xaa>
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040e4:	2300      	movs	r3, #0
 80040e6:	9303      	str	r3, [sp, #12]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f851 	bl	80041a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004104:	f000 f8e4 	bl	80042d0 <prvAddNewTaskToReadyList>
 8004108:	e001      	b.n	800410e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800410e:	697b      	ldr	r3, [r7, #20]
	}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	; 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af04      	add	r7, sp, #16
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fef3 	bl	8004f18 <pvPortMalloc>
 8004132:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800413a:	20a0      	movs	r0, #160	; 0xa0
 800413c:	f000 feec 	bl	8004f18 <pvPortMalloc>
 8004140:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
 800414e:	e005      	b.n	800415c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f000 ffa5 	bl	80050a0 <vPortFree>
 8004156:	e001      	b.n	800415c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d017      	beq.n	8004192 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	2300      	movs	r3, #0
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	9302      	str	r3, [sp, #8]
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f80f 	bl	80041a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004186:	69f8      	ldr	r0, [r7, #28]
 8004188:	f000 f8a2 	bl	80042d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	e002      	b.n	8004198 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004198:	69bb      	ldr	r3, [r7, #24]
	}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041bc:	3b01      	subs	r3, #1
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617b      	str	r3, [r7, #20]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	e012      	b.n	8004218 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	7819      	ldrb	r1, [r3, #0]
 80041fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	3334      	adds	r3, #52	; 0x34
 8004202:	460a      	mov	r2, r1
 8004204:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	d9e9      	bls.n	80041f2 <prvInitialiseNewTask+0x4e>
 800421e:	e000      	b.n	8004222 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004220:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	2b06      	cmp	r3, #6
 800422e:	d901      	bls.n	8004234 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004230:	2306      	movs	r3, #6
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fe74 	bl	8003f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	3318      	adds	r3, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fe6f 	bl	8003f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	f1c3 0207 	rsb	r2, r3, #7
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	2200      	movs	r2, #0
 800427c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	334c      	adds	r3, #76	; 0x4c
 8004284:	224c      	movs	r2, #76	; 0x4c
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f001 f81f 	bl	80052cc <memset>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <prvInitialiseNewTask+0x120>)
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <prvInitialiseNewTask+0x124>)
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <prvInitialiseNewTask+0x128>)
 800429e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	69b8      	ldr	r0, [r7, #24]
 80042a6:	f000 fc2b 	bl	8004b00 <pxPortInitialiseStack>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042bc:	bf00      	nop
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200014f0 	.word	0x200014f0
 80042c8:	20001558 	.word	0x20001558
 80042cc:	200015c0 	.word	0x200015c0

080042d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042d8:	f000 fd3c 	bl	8004d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042dc:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <prvAddNewTaskToReadyList+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	4a29      	ldr	r2, [pc, #164]	; (8004388 <prvAddNewTaskToReadyList+0xb8>)
 80042e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <prvAddNewTaskToReadyList+0xbc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ee:	4a27      	ldr	r2, [pc, #156]	; (800438c <prvAddNewTaskToReadyList+0xbc>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <prvAddNewTaskToReadyList+0xb8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d110      	bne.n	800431e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042fc:	f000 fad2 	bl	80048a4 <prvInitialiseTaskLists>
 8004300:	e00d      	b.n	800431e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004302:	4b23      	ldr	r3, [pc, #140]	; (8004390 <prvAddNewTaskToReadyList+0xc0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <prvAddNewTaskToReadyList+0xbc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d802      	bhi.n	800431e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004318:	4a1c      	ldr	r2, [pc, #112]	; (800438c <prvAddNewTaskToReadyList+0xbc>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <prvAddNewTaskToReadyList+0xc4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <prvAddNewTaskToReadyList+0xc4>)
 8004326:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2201      	movs	r2, #1
 800432e:	409a      	lsls	r2, r3
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4313      	orrs	r3, r2
 8004336:	4a18      	ldr	r2, [pc, #96]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <prvAddNewTaskToReadyList+0xcc>)
 8004348:	441a      	add	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7ff fdfe 	bl	8003f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004356:	f000 fd2d 	bl	8004db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <prvAddNewTaskToReadyList+0xc0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00e      	beq.n	8004380 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvAddNewTaskToReadyList+0xbc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	429a      	cmp	r2, r3
 800436e:	d207      	bcs.n	8004380 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvAddNewTaskToReadyList+0xd0>)
 8004372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	200008a4 	.word	0x200008a4
 800438c:	200007a4 	.word	0x200007a4
 8004390:	200008b0 	.word	0x200008b0
 8004394:	200008c0 	.word	0x200008c0
 8004398:	200008ac 	.word	0x200008ac
 800439c:	200007a8 	.word	0x200007a8
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d017      	beq.n	80043e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <vTaskDelay+0x60>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <vTaskDelay+0x30>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60bb      	str	r3, [r7, #8]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043d4:	f000 f884 	bl	80044e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043d8:	2100      	movs	r1, #0
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb2a 	bl	8004a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043e0:	f000 f88c 	bl	80044fc <xTaskResumeAll>
 80043e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <vTaskDelay+0x64>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200008cc 	.word	0x200008cc
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800441a:	463a      	mov	r2, r7
 800441c:	1d39      	adds	r1, r7, #4
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	4618      	mov	r0, r3
 8004424:	f7fb fed4 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	9202      	str	r2, [sp, #8]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	2300      	movs	r3, #0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2300      	movs	r3, #0
 8004438:	460a      	mov	r2, r1
 800443a:	4921      	ldr	r1, [pc, #132]	; (80044c0 <vTaskStartScheduler+0xb4>)
 800443c:	4821      	ldr	r0, [pc, #132]	; (80044c4 <vTaskStartScheduler+0xb8>)
 800443e:	f7ff fe0f 	bl	8004060 <xTaskCreateStatic>
 8004442:	4603      	mov	r3, r0
 8004444:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <vTaskStartScheduler+0xbc>)
 8004446:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004448:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <vTaskStartScheduler+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e001      	b.n	800445a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d11b      	bne.n	8004498 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <vTaskStartScheduler+0xc0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	334c      	adds	r3, #76	; 0x4c
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <vTaskStartScheduler+0xc4>)
 800447c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <vTaskStartScheduler+0xc8>)
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <vTaskStartScheduler+0xcc>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <vTaskStartScheduler+0xd0>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004492:	f000 fbbd 	bl	8004c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004496:	e00e      	b.n	80044b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d10a      	bne.n	80044b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <vTaskStartScheduler+0xa8>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	0800557c 	.word	0x0800557c
 80044c4:	08004875 	.word	0x08004875
 80044c8:	200008c8 	.word	0x200008c8
 80044cc:	200007a4 	.word	0x200007a4
 80044d0:	2000005c 	.word	0x2000005c
 80044d4:	200008c4 	.word	0x200008c4
 80044d8:	200008b0 	.word	0x200008b0
 80044dc:	200008a8 	.word	0x200008a8

080044e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <vTaskSuspendAll+0x18>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4a03      	ldr	r2, [pc, #12]	; (80044f8 <vTaskSuspendAll+0x18>)
 80044ec:	6013      	str	r3, [r2, #0]
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	200008cc 	.word	0x200008cc

080044fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <xTaskResumeAll+0x114>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskResumeAll+0x2c>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	603b      	str	r3, [r7, #0]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004528:	f000 fc14 	bl	8004d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <xTaskResumeAll+0x114>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	4a37      	ldr	r2, [pc, #220]	; (8004610 <xTaskResumeAll+0x114>)
 8004534:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004536:	4b36      	ldr	r3, [pc, #216]	; (8004610 <xTaskResumeAll+0x114>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d161      	bne.n	8004602 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800453e:	4b35      	ldr	r3, [pc, #212]	; (8004614 <xTaskResumeAll+0x118>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d05d      	beq.n	8004602 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004546:	e02e      	b.n	80045a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <xTaskResumeAll+0x11c>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3318      	adds	r3, #24
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fd59 	bl	800400c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fd54 	bl	800400c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2201      	movs	r2, #1
 800456a:	409a      	lsls	r2, r3
 800456c:	4b2b      	ldr	r3, [pc, #172]	; (800461c <xTaskResumeAll+0x120>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <xTaskResumeAll+0x120>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4a27      	ldr	r2, [pc, #156]	; (8004620 <xTaskResumeAll+0x124>)
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3304      	adds	r3, #4
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f7ff fce0 	bl	8003f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <xTaskResumeAll+0x128>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <xTaskResumeAll+0x12c>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <xTaskResumeAll+0x11c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cc      	bne.n	8004548 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b4:	f000 fa18 	bl	80049e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045b8:	4b1c      	ldr	r3, [pc, #112]	; (800462c <xTaskResumeAll+0x130>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c4:	f000 f836 	bl	8004634 <xTaskIncrementTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <xTaskResumeAll+0x12c>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f1      	bne.n	80045c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <xTaskResumeAll+0x130>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <xTaskResumeAll+0x12c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045ee:	2301      	movs	r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <xTaskResumeAll+0x134>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004602:	f000 fbd7 	bl	8004db4 <vPortExitCritical>

	return xAlreadyYielded;
 8004606:	68bb      	ldr	r3, [r7, #8]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200008cc 	.word	0x200008cc
 8004614:	200008a4 	.word	0x200008a4
 8004618:	20000864 	.word	0x20000864
 800461c:	200008ac 	.word	0x200008ac
 8004620:	200007a8 	.word	0x200007a8
 8004624:	200007a4 	.word	0x200007a4
 8004628:	200008b8 	.word	0x200008b8
 800462c:	200008b4 	.word	0x200008b4
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463e:	4b51      	ldr	r3, [pc, #324]	; (8004784 <xTaskIncrementTick+0x150>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 808d 	bne.w	8004762 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004648:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <xTaskIncrementTick+0x154>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3301      	adds	r3, #1
 800464e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004650:	4a4d      	ldr	r2, [pc, #308]	; (8004788 <xTaskIncrementTick+0x154>)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d120      	bne.n	800469e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800465c:	4b4b      	ldr	r3, [pc, #300]	; (800478c <xTaskIncrementTick+0x158>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <xTaskIncrementTick+0x48>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	603b      	str	r3, [r7, #0]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <xTaskIncrementTick+0x46>
 800467c:	4b43      	ldr	r3, [pc, #268]	; (800478c <xTaskIncrementTick+0x158>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <xTaskIncrementTick+0x15c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a41      	ldr	r2, [pc, #260]	; (800478c <xTaskIncrementTick+0x158>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4a41      	ldr	r2, [pc, #260]	; (8004790 <xTaskIncrementTick+0x15c>)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <xTaskIncrementTick+0x160>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <xTaskIncrementTick+0x160>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	f000 f9a5 	bl	80049e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800469e:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <xTaskIncrementTick+0x164>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d34d      	bcc.n	8004744 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <xTaskIncrementTick+0x158>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xTaskIncrementTick+0x82>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xTaskIncrementTick+0x84>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d004      	beq.n	80046c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <xTaskIncrementTick+0x164>)
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	601a      	str	r2, [r3, #0]
					break;
 80046c4:	e03e      	b.n	8004744 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <xTaskIncrementTick+0x158>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d203      	bcs.n	80046e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046de:	4a2e      	ldr	r2, [pc, #184]	; (8004798 <xTaskIncrementTick+0x164>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]
						break;
 80046e4:	e02e      	b.n	8004744 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fc8e 	bl	800400c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fc85 	bl	800400c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	2201      	movs	r2, #1
 8004708:	409a      	lsls	r2, r3
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <xTaskIncrementTick+0x168>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	4a22      	ldr	r2, [pc, #136]	; (800479c <xTaskIncrementTick+0x168>)
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4a1f      	ldr	r2, [pc, #124]	; (80047a0 <xTaskIncrementTick+0x16c>)
 8004722:	441a      	add	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7ff fc11 	bl	8003f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <xTaskIncrementTick+0x170>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	429a      	cmp	r2, r3
 800473c:	d3b4      	bcc.n	80046a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004742:	e7b1      	b.n	80046a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <xTaskIncrementTick+0x170>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4915      	ldr	r1, [pc, #84]	; (80047a0 <xTaskIncrementTick+0x16c>)
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d907      	bls.n	800476c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e004      	b.n	800476c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <xTaskIncrementTick+0x174>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <xTaskIncrementTick+0x174>)
 800476a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <xTaskIncrementTick+0x178>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004778:	697b      	ldr	r3, [r7, #20]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200008cc 	.word	0x200008cc
 8004788:	200008a8 	.word	0x200008a8
 800478c:	2000085c 	.word	0x2000085c
 8004790:	20000860 	.word	0x20000860
 8004794:	200008bc 	.word	0x200008bc
 8004798:	200008c4 	.word	0x200008c4
 800479c:	200008ac 	.word	0x200008ac
 80047a0:	200007a8 	.word	0x200007a8
 80047a4:	200007a4 	.word	0x200007a4
 80047a8:	200008b4 	.word	0x200008b4
 80047ac:	200008b8 	.word	0x200008b8

080047b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047b6:	4b29      	ldr	r3, [pc, #164]	; (800485c <vTaskSwitchContext+0xac>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <vTaskSwitchContext+0xb0>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047c4:	e044      	b.n	8004850 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <vTaskSwitchContext+0xb0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <vTaskSwitchContext+0xb4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f1c3 031f 	rsb	r3, r3, #31
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	4921      	ldr	r1, [pc, #132]	; (8004868 <vTaskSwitchContext+0xb8>)
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <vTaskSwitchContext+0x5c>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	607b      	str	r3, [r7, #4]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <vTaskSwitchContext+0x5a>
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <vTaskSwitchContext+0xb8>)
 8004818:	4413      	add	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3308      	adds	r3, #8
 800482e:	429a      	cmp	r2, r3
 8004830:	d104      	bne.n	800483c <vTaskSwitchContext+0x8c>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <vTaskSwitchContext+0xbc>)
 8004844:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <vTaskSwitchContext+0xbc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	334c      	adds	r3, #76	; 0x4c
 800484c:	4a08      	ldr	r2, [pc, #32]	; (8004870 <vTaskSwitchContext+0xc0>)
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	200008cc 	.word	0x200008cc
 8004860:	200008b8 	.word	0x200008b8
 8004864:	200008ac 	.word	0x200008ac
 8004868:	200007a8 	.word	0x200007a8
 800486c:	200007a4 	.word	0x200007a4
 8004870:	2000005c 	.word	0x2000005c

08004874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800487c:	f000 f852 	bl	8004924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <prvIdleTask+0x28>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d9f9      	bls.n	800487c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <prvIdleTask+0x2c>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004898:	e7f0      	b.n	800487c <prvIdleTask+0x8>
 800489a:	bf00      	nop
 800489c:	200007a8 	.word	0x200007a8
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	e00c      	b.n	80048ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <prvInitialiseTaskLists+0x60>)
 80048bc:	4413      	add	r3, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fb1a 	bl	8003ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3301      	adds	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d9ef      	bls.n	80048b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048d0:	480d      	ldr	r0, [pc, #52]	; (8004908 <prvInitialiseTaskLists+0x64>)
 80048d2:	f7ff fb11 	bl	8003ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048d6:	480d      	ldr	r0, [pc, #52]	; (800490c <prvInitialiseTaskLists+0x68>)
 80048d8:	f7ff fb0e 	bl	8003ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048dc:	480c      	ldr	r0, [pc, #48]	; (8004910 <prvInitialiseTaskLists+0x6c>)
 80048de:	f7ff fb0b 	bl	8003ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048e2:	480c      	ldr	r0, [pc, #48]	; (8004914 <prvInitialiseTaskLists+0x70>)
 80048e4:	f7ff fb08 	bl	8003ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048e8:	480b      	ldr	r0, [pc, #44]	; (8004918 <prvInitialiseTaskLists+0x74>)
 80048ea:	f7ff fb05 	bl	8003ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048ee:	4b0b      	ldr	r3, [pc, #44]	; (800491c <prvInitialiseTaskLists+0x78>)
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <prvInitialiseTaskLists+0x64>)
 80048f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <prvInitialiseTaskLists+0x7c>)
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <prvInitialiseTaskLists+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200007a8 	.word	0x200007a8
 8004908:	20000834 	.word	0x20000834
 800490c:	20000848 	.word	0x20000848
 8004910:	20000864 	.word	0x20000864
 8004914:	20000878 	.word	0x20000878
 8004918:	20000890 	.word	0x20000890
 800491c:	2000085c 	.word	0x2000085c
 8004920:	20000860 	.word	0x20000860

08004924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800492a:	e019      	b.n	8004960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800492c:	f000 fa12 	bl	8004d54 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <prvCheckTasksWaitingTermination+0x50>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fb65 	bl	800400c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <prvCheckTasksWaitingTermination+0x54>)
 800494a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004956:	f000 fa2d 	bl	8004db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f810 	bl	8004980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e1      	bne.n	800492c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000878 	.word	0x20000878
 8004978:	200008a4 	.word	0x200008a4
 800497c:	2000088c 	.word	0x2000088c

08004980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	334c      	adds	r3, #76	; 0x4c
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fca5 	bl	80052dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb7d 	bl	80050a0 <vPortFree>
				vPortFree( pxTCB );
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fb7a 	bl	80050a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049ac:	e018      	b.n	80049e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d103      	bne.n	80049c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb71 	bl	80050a0 <vPortFree>
	}
 80049be:	e00f      	b.n	80049e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d00a      	beq.n	80049e0 <prvDeleteTCB+0x60>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60fb      	str	r3, [r7, #12]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <prvDeleteTCB+0x5e>
	}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <prvResetNextTaskUnblockTime+0x44>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <prvResetNextTaskUnblockTime+0x14>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <prvResetNextTaskUnblockTime+0x16>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d004      	beq.n	8004a0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <prvResetNextTaskUnblockTime+0x48>)
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a0a:	e008      	b.n	8004a1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <prvResetNextTaskUnblockTime+0x44>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <prvResetNextTaskUnblockTime+0x48>)
 8004a1c:	6013      	str	r3, [r2, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	2000085c 	.word	0x2000085c
 8004a30:	200008c4 	.word	0x200008c4

08004a34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a3e:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fade 	bl	800400c <uxListRemove>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43da      	mvns	r2, r3
 8004a64:	4b21      	ldr	r3, [pc, #132]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d10a      	bne.n	8004a8c <prvAddCurrentTaskToDelayedList+0x58>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	481a      	ldr	r0, [pc, #104]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a86:	f7ff fa64 	bl	8003f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a8a:	e026      	b.n	8004ada <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d209      	bcs.n	8004ab8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa4:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7ff fa72 	bl	8003f9a <vListInsert>
}
 8004ab6:	e010      	b.n	8004ada <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7ff fa68 	bl	8003f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d202      	bcs.n	8004ada <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6013      	str	r3, [r2, #0]
}
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200008a8 	.word	0x200008a8
 8004ae8:	200007a4 	.word	0x200007a4
 8004aec:	200008ac 	.word	0x200008ac
 8004af0:	20000890 	.word	0x20000890
 8004af4:	20000860 	.word	0x20000860
 8004af8:	2000085c 	.word	0x2000085c
 8004afc:	200008c4 	.word	0x200008c4

08004b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b30:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <pxPortInitialiseStack+0x64>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b14      	subs	r3, #20
 8004b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f06f 0202 	mvn.w	r2, #2
 8004b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3b20      	subs	r3, #32
 8004b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	08004b69 	.word	0x08004b69

08004b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvTaskExitError+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d00a      	beq.n	8004b92 <prvTaskExitError+0x2a>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <prvTaskExitError+0x28>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	60bb      	str	r3, [r7, #8]
}
 8004ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ba6:	bf00      	nop
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0fc      	beq.n	8004ba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	200007a4 	.word	0x200007a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004be8:	4808      	ldr	r0, [pc, #32]	; (8004c0c <prvPortStartFirstTask+0x24>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8814 	msr	CONTROL, r0
 8004bfa:	b662      	cpsie	i
 8004bfc:	b661      	cpsie	f
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	df00      	svc	0
 8004c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c0a:	bf00      	nop
 8004c0c:	e000ed08 	.word	0xe000ed08

08004c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c16:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <xPortStartScheduler+0x120>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a46      	ldr	r2, [pc, #280]	; (8004d34 <xPortStartScheduler+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10a      	bne.n	8004c36 <xPortStartScheduler+0x26>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <xPortStartScheduler+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	; (8004d38 <xPortStartScheduler+0x128>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10a      	bne.n	8004c56 <xPortStartScheduler+0x46>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <xPortStartScheduler+0x12c>)
 8004c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	22ff      	movs	r2, #255	; 0xff
 8004c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <xPortStartScheduler+0x130>)
 8004c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c84:	e009      	b.n	8004c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	4a2d      	ldr	r2, [pc, #180]	; (8004d44 <xPortStartScheduler+0x134>)
 8004c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9a:	78fb      	ldrb	r3, [r7, #3]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d0ef      	beq.n	8004c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ca6:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <xPortStartScheduler+0x134>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f1c3 0307 	rsb	r3, r3, #7
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d00a      	beq.n	8004cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	60bb      	str	r3, [r7, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	e7fe      	b.n	8004cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <xPortStartScheduler+0x134>)
 8004cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ce6:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <xPortStartScheduler+0x138>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cf2:	4b15      	ldr	r3, [pc, #84]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <xPortStartScheduler+0x138>)
 8004cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cfe:	f000 f8dd 	bl	8004ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <xPortStartScheduler+0x13c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d08:	f000 f8fc 	bl	8004f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <xPortStartScheduler+0x140>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <xPortStartScheduler+0x140>)
 8004d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d18:	f7ff ff66 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d1c:	f7ff fd48 	bl	80047b0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d20:	f7ff ff22 	bl	8004b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	e000ed00 	.word	0xe000ed00
 8004d34:	410fc271 	.word	0x410fc271
 8004d38:	410fc270 	.word	0x410fc270
 8004d3c:	e000e400 	.word	0xe000e400
 8004d40:	200008d0 	.word	0x200008d0
 8004d44:	200008d4 	.word	0x200008d4
 8004d48:	e000ed20 	.word	0xe000ed20
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	e000ef34 	.word	0xe000ef34

08004d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
}
 8004d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <vPortEnterCritical+0x58>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <vPortEnterCritical+0x58>)
 8004d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <vPortEnterCritical+0x58>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10f      	bne.n	8004da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortEnterCritical+0x5c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	603b      	str	r3, [r7, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <vPortEnterCritical+0x4a>
	}
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <vPortExitCritical+0x50>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <vPortExitCritical+0x24>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	607b      	str	r3, [r7, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <vPortExitCritical+0x50>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <vPortExitCritical+0x50>)
 8004de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <vPortExitCritical+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d105      	bne.n	8004df6 <vPortExitCritical+0x42>
 8004dea:	2300      	movs	r3, #0
 8004dec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c
	...

08004e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7ff fcb6 	bl	80047b0 <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	200007a4 	.word	0x200007a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7ff fbcf 	bl	8004634 <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <SysTick_Handler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f12:	bf00      	nop
 8004f14:	e000ed88 	.word	0xe000ed88

08004f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f24:	f7ff fadc 	bl	80044e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f28:	4b58      	ldr	r3, [pc, #352]	; (800508c <pvPortMalloc+0x174>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f30:	f000 f910 	bl	8005154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f34:	4b56      	ldr	r3, [pc, #344]	; (8005090 <pvPortMalloc+0x178>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 808e 	bne.w	800505e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01d      	beq.n	8004f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f48:	2208      	movs	r2, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d014      	beq.n	8004f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <pvPortMalloc+0x6c>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d069      	beq.n	800505e <pvPortMalloc+0x146>
 8004f8a:	4b42      	ldr	r3, [pc, #264]	; (8005094 <pvPortMalloc+0x17c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d864      	bhi.n	800505e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f94:	4b40      	ldr	r3, [pc, #256]	; (8005098 <pvPortMalloc+0x180>)
 8004f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f98:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <pvPortMalloc+0x180>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f9e:	e004      	b.n	8004faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d903      	bls.n	8004fbc <pvPortMalloc+0xa4>
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fbc:	4b33      	ldr	r3, [pc, #204]	; (800508c <pvPortMalloc+0x174>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d04b      	beq.n	800505e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2208      	movs	r2, #8
 8004fcc:	4413      	add	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	1ad2      	subs	r2, r2, r3
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d91f      	bls.n	8005028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <pvPortMalloc+0xf8>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	613b      	str	r3, [r7, #16]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005022:	69b8      	ldr	r0, [r7, #24]
 8005024:	f000 f8f8 	bl	8005218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005028:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <pvPortMalloc+0x17c>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	4a18      	ldr	r2, [pc, #96]	; (8005094 <pvPortMalloc+0x17c>)
 8005034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005036:	4b17      	ldr	r3, [pc, #92]	; (8005094 <pvPortMalloc+0x17c>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <pvPortMalloc+0x184>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d203      	bcs.n	800504a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <pvPortMalloc+0x17c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	; (800509c <pvPortMalloc+0x184>)
 8005048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <pvPortMalloc+0x178>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	431a      	orrs	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800505e:	f7ff fa4d 	bl	80044fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <pvPortMalloc+0x16a>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	60fb      	str	r3, [r7, #12]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <pvPortMalloc+0x168>
	return pvReturn;
 8005082:	69fb      	ldr	r3, [r7, #28]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3728      	adds	r7, #40	; 0x28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	200014e0 	.word	0x200014e0
 8005090:	200014ec 	.word	0x200014ec
 8005094:	200014e4 	.word	0x200014e4
 8005098:	200014d8 	.word	0x200014d8
 800509c:	200014e8 	.word	0x200014e8

080050a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d048      	beq.n	8005144 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b2:	2308      	movs	r3, #8
 80050b4:	425b      	negs	r3, r3
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b21      	ldr	r3, [pc, #132]	; (800514c <vPortFree+0xac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4013      	ands	r3, r2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <vPortFree+0x44>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60fb      	str	r3, [r7, #12]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <vPortFree+0x62>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	60bb      	str	r3, [r7, #8]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <vPortFree+0xac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d115      	bne.n	8005144 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <vPortFree+0xac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005128:	f7ff f9da 	bl	80044e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <vPortFree+0xb0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	4a06      	ldr	r2, [pc, #24]	; (8005150 <vPortFree+0xb0>)
 8005138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f000 f86c 	bl	8005218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005140:	f7ff f9dc 	bl	80044fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005144:	bf00      	nop
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	200014ec 	.word	0x200014ec
 8005150:	200014e4 	.word	0x200014e4

08005154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800515e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <prvHeapInit+0xac>)
 8005162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <prvHeapInit+0xac>)
 8005184:	4413      	add	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <prvHeapInit+0xb0>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <prvHeapInit+0xb0>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a0:	2208      	movs	r2, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <prvHeapInit+0xb4>)
 80051b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <prvHeapInit+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvHeapInit+0xb4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvHeapInit+0xb4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <prvHeapInit+0xb8>)
 80051e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <prvHeapInit+0xbc>)
 80051ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvHeapInit+0xc0>)
 80051ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	200008d8 	.word	0x200008d8
 8005204:	200014d8 	.word	0x200014d8
 8005208:	200014e0 	.word	0x200014e0
 800520c:	200014e8 	.word	0x200014e8
 8005210:	200014e4 	.word	0x200014e4
 8005214:	200014ec 	.word	0x200014ec

08005218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <prvInsertBlockIntoFreeList+0x14>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d8f7      	bhi.n	8005226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d118      	bne.n	80052a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00d      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e003      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	200014d8 	.word	0x200014d8
 80052c8:	200014e0 	.word	0x200014e0

080052cc <memset>:
 80052cc:	4402      	add	r2, r0
 80052ce:	4603      	mov	r3, r0
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d100      	bne.n	80052d6 <memset+0xa>
 80052d4:	4770      	bx	lr
 80052d6:	f803 1b01 	strb.w	r1, [r3], #1
 80052da:	e7f9      	b.n	80052d0 <memset+0x4>

080052dc <_reclaim_reent>:
 80052dc:	4b29      	ldr	r3, [pc, #164]	; (8005384 <_reclaim_reent+0xa8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4283      	cmp	r3, r0
 80052e2:	b570      	push	{r4, r5, r6, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	d04b      	beq.n	8005380 <_reclaim_reent+0xa4>
 80052e8:	69c3      	ldr	r3, [r0, #28]
 80052ea:	b143      	cbz	r3, 80052fe <_reclaim_reent+0x22>
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d144      	bne.n	800537c <_reclaim_reent+0xa0>
 80052f2:	69e3      	ldr	r3, [r4, #28]
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	b111      	cbz	r1, 80052fe <_reclaim_reent+0x22>
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 f86b 	bl	80053d4 <_free_r>
 80052fe:	6961      	ldr	r1, [r4, #20]
 8005300:	b111      	cbz	r1, 8005308 <_reclaim_reent+0x2c>
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f866 	bl	80053d4 <_free_r>
 8005308:	69e1      	ldr	r1, [r4, #28]
 800530a:	b111      	cbz	r1, 8005312 <_reclaim_reent+0x36>
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f861 	bl	80053d4 <_free_r>
 8005312:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005314:	b111      	cbz	r1, 800531c <_reclaim_reent+0x40>
 8005316:	4620      	mov	r0, r4
 8005318:	f000 f85c 	bl	80053d4 <_free_r>
 800531c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800531e:	b111      	cbz	r1, 8005326 <_reclaim_reent+0x4a>
 8005320:	4620      	mov	r0, r4
 8005322:	f000 f857 	bl	80053d4 <_free_r>
 8005326:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005328:	b111      	cbz	r1, 8005330 <_reclaim_reent+0x54>
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f852 	bl	80053d4 <_free_r>
 8005330:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005332:	b111      	cbz	r1, 800533a <_reclaim_reent+0x5e>
 8005334:	4620      	mov	r0, r4
 8005336:	f000 f84d 	bl	80053d4 <_free_r>
 800533a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800533c:	b111      	cbz	r1, 8005344 <_reclaim_reent+0x68>
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f848 	bl	80053d4 <_free_r>
 8005344:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005346:	b111      	cbz	r1, 800534e <_reclaim_reent+0x72>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f843 	bl	80053d4 <_free_r>
 800534e:	6a23      	ldr	r3, [r4, #32]
 8005350:	b1b3      	cbz	r3, 8005380 <_reclaim_reent+0xa4>
 8005352:	4620      	mov	r0, r4
 8005354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005358:	4718      	bx	r3
 800535a:	5949      	ldr	r1, [r1, r5]
 800535c:	b941      	cbnz	r1, 8005370 <_reclaim_reent+0x94>
 800535e:	3504      	adds	r5, #4
 8005360:	69e3      	ldr	r3, [r4, #28]
 8005362:	2d80      	cmp	r5, #128	; 0x80
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	d1f8      	bne.n	800535a <_reclaim_reent+0x7e>
 8005368:	4620      	mov	r0, r4
 800536a:	f000 f833 	bl	80053d4 <_free_r>
 800536e:	e7c0      	b.n	80052f2 <_reclaim_reent+0x16>
 8005370:	680e      	ldr	r6, [r1, #0]
 8005372:	4620      	mov	r0, r4
 8005374:	f000 f82e 	bl	80053d4 <_free_r>
 8005378:	4631      	mov	r1, r6
 800537a:	e7ef      	b.n	800535c <_reclaim_reent+0x80>
 800537c:	2500      	movs	r5, #0
 800537e:	e7ef      	b.n	8005360 <_reclaim_reent+0x84>
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	bf00      	nop
 8005384:	2000005c 	.word	0x2000005c

08005388 <__libc_init_array>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4d0d      	ldr	r5, [pc, #52]	; (80053c0 <__libc_init_array+0x38>)
 800538c:	4c0d      	ldr	r4, [pc, #52]	; (80053c4 <__libc_init_array+0x3c>)
 800538e:	1b64      	subs	r4, r4, r5
 8005390:	10a4      	asrs	r4, r4, #2
 8005392:	2600      	movs	r6, #0
 8005394:	42a6      	cmp	r6, r4
 8005396:	d109      	bne.n	80053ac <__libc_init_array+0x24>
 8005398:	4d0b      	ldr	r5, [pc, #44]	; (80053c8 <__libc_init_array+0x40>)
 800539a:	4c0c      	ldr	r4, [pc, #48]	; (80053cc <__libc_init_array+0x44>)
 800539c:	f000 f872 	bl	8005484 <_init>
 80053a0:	1b64      	subs	r4, r4, r5
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	2600      	movs	r6, #0
 80053a6:	42a6      	cmp	r6, r4
 80053a8:	d105      	bne.n	80053b6 <__libc_init_array+0x2e>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b0:	4798      	blx	r3
 80053b2:	3601      	adds	r6, #1
 80053b4:	e7ee      	b.n	8005394 <__libc_init_array+0xc>
 80053b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ba:	4798      	blx	r3
 80053bc:	3601      	adds	r6, #1
 80053be:	e7f2      	b.n	80053a6 <__libc_init_array+0x1e>
 80053c0:	080055bc 	.word	0x080055bc
 80053c4:	080055bc 	.word	0x080055bc
 80053c8:	080055bc 	.word	0x080055bc
 80053cc:	080055c0 	.word	0x080055c0

080053d0 <__retarget_lock_acquire_recursive>:
 80053d0:	4770      	bx	lr

080053d2 <__retarget_lock_release_recursive>:
 80053d2:	4770      	bx	lr

080053d4 <_free_r>:
 80053d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d6:	2900      	cmp	r1, #0
 80053d8:	d044      	beq.n	8005464 <_free_r+0x90>
 80053da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053de:	9001      	str	r0, [sp, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f1a1 0404 	sub.w	r4, r1, #4
 80053e6:	bfb8      	it	lt
 80053e8:	18e4      	addlt	r4, r4, r3
 80053ea:	f000 f83f 	bl	800546c <__malloc_lock>
 80053ee:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <_free_r+0x94>)
 80053f0:	9801      	ldr	r0, [sp, #4]
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	b933      	cbnz	r3, 8005404 <_free_r+0x30>
 80053f6:	6063      	str	r3, [r4, #4]
 80053f8:	6014      	str	r4, [r2, #0]
 80053fa:	b003      	add	sp, #12
 80053fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005400:	f000 b83a 	b.w	8005478 <__malloc_unlock>
 8005404:	42a3      	cmp	r3, r4
 8005406:	d908      	bls.n	800541a <_free_r+0x46>
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	1961      	adds	r1, r4, r5
 800540c:	428b      	cmp	r3, r1
 800540e:	bf01      	itttt	eq
 8005410:	6819      	ldreq	r1, [r3, #0]
 8005412:	685b      	ldreq	r3, [r3, #4]
 8005414:	1949      	addeq	r1, r1, r5
 8005416:	6021      	streq	r1, [r4, #0]
 8005418:	e7ed      	b.n	80053f6 <_free_r+0x22>
 800541a:	461a      	mov	r2, r3
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	b10b      	cbz	r3, 8005424 <_free_r+0x50>
 8005420:	42a3      	cmp	r3, r4
 8005422:	d9fa      	bls.n	800541a <_free_r+0x46>
 8005424:	6811      	ldr	r1, [r2, #0]
 8005426:	1855      	adds	r5, r2, r1
 8005428:	42a5      	cmp	r5, r4
 800542a:	d10b      	bne.n	8005444 <_free_r+0x70>
 800542c:	6824      	ldr	r4, [r4, #0]
 800542e:	4421      	add	r1, r4
 8005430:	1854      	adds	r4, r2, r1
 8005432:	42a3      	cmp	r3, r4
 8005434:	6011      	str	r1, [r2, #0]
 8005436:	d1e0      	bne.n	80053fa <_free_r+0x26>
 8005438:	681c      	ldr	r4, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	6053      	str	r3, [r2, #4]
 800543e:	440c      	add	r4, r1
 8005440:	6014      	str	r4, [r2, #0]
 8005442:	e7da      	b.n	80053fa <_free_r+0x26>
 8005444:	d902      	bls.n	800544c <_free_r+0x78>
 8005446:	230c      	movs	r3, #12
 8005448:	6003      	str	r3, [r0, #0]
 800544a:	e7d6      	b.n	80053fa <_free_r+0x26>
 800544c:	6825      	ldr	r5, [r4, #0]
 800544e:	1961      	adds	r1, r4, r5
 8005450:	428b      	cmp	r3, r1
 8005452:	bf04      	itt	eq
 8005454:	6819      	ldreq	r1, [r3, #0]
 8005456:	685b      	ldreq	r3, [r3, #4]
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	bf04      	itt	eq
 800545c:	1949      	addeq	r1, r1, r5
 800545e:	6021      	streq	r1, [r4, #0]
 8005460:	6054      	str	r4, [r2, #4]
 8005462:	e7ca      	b.n	80053fa <_free_r+0x26>
 8005464:	b003      	add	sp, #12
 8005466:	bd30      	pop	{r4, r5, pc}
 8005468:	2000162c 	.word	0x2000162c

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_lock+0x8>)
 800546e:	f7ff bfaf 	b.w	80053d0 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	20001628 	.word	0x20001628

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_unlock+0x8>)
 800547a:	f7ff bfaa 	b.w	80053d2 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	20001628 	.word	0x20001628

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
